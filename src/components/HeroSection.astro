---
import Grid from './Grid.astro'

const hobbies = [
  { icon: 'i-pixelarticons-code', label: 'CODE', level: 30 },
  { icon: 'i-pixelarticons-book', label: 'BOOK', level: 25 },
  { icon: 'i-pixelarticons-movie', label: 'MOVIE', level: 50 },
  { icon: 'i-pixelarticons-gamepad ', label: 'GAME', level: 30 },
]
---

<div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-20">
  <div class="space-y-6">
    <div
      class="inline-flex items-center gap-2 px-4 py-2 bg-primary/10 text-primary rounded-lg"
    >
      <span class="animate-pulse">‚óè</span>
      <span class="font-pixel">ONLINE</span>
    </div>

    <h1 class="text-4xl md:text-6xl font-pixel leading-tight">
      DEVELOPER<br />
      <type-writer class="text-primary" data-rotate='["FRONTEND", "BACKEND", "FULLSTACK"]' data-period="2000"></type-writer>
    </h1>

    <p class="text-slate-400 text-lg">
      Just for fun and life.
    </p>

    <div class="grid grid-cols-2 sm:grid-cols-4 gap-4">
      {
        hobbies.map((hobby) => (
          <div class="pixel-hobby-box">
            <div class="flex flex-col items-center gap-2">
              <span
                class={`${hobby.icon} text-2xl group-hover:text-primary transition-colors`}
              />
              <span class="text-xs">{hobby.label}</span>
            </div>
            <div class="hobby-level" style={`--level: ${hobby.level}%`}>
              <div class="h-1 w-full bg-slate-700/50">
                <div
                  class="h-full bg-primary transition-all duration-1000"
                  style="width: 0%"
                />
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </div>

  <div class="pixel-grid relative h-[400px] border-2 border-primary/20">
    <Grid />
    <div
      id="character"
      class="absolute z-10 pointer-events-none transition-transform duration-300 ease-out"
    >
      <div
        class="w-12 h-12 bg-primary rounded-lg shadow-[0_0_15px_rgba(0,255,157,0.5)]"
      >
      </div>
    </div>
  </div>
</div>

<style>
  .pixel-hobby-box {
    @apply relative p-4 border-2 border-slate-700 hover:border-primary 
         transition-all cursor-pointer overflow-hidden;
  }

  .hobby-level {
    @apply absolute bottom-2 left-2 right-2;
  }

  .pixel-grid {
    @apply relative overflow-hidden bg-slate-200/50 dark:bg-slate-700/50 ;
  }

  @keyframes floatc {
    0%,
    100% {
      transform: translate(var(--x, 0), calc(var(--y, 0) + 0px));
    }
    50% {
      transform: translate(var(--x, 0), calc(var(--y, 0) - 10px));
    }
  }

  #character {
    animation: floatc 2s ease-in-out infinite;
  }
</style>

<script>
class TypewriterComponent extends HTMLElement {
  private toRotate: string[];
  private period: number;
  private loopNum: number;
  private txt: string;
  private isDeleting: boolean;

  constructor() {
    super();
    this.toRotate = [];
    this.period = 2000;
    this.loopNum = 0;
    this.txt = "";
    this.isDeleting = false;
  }

  connectedCallback() {
    const toRotate = this.getAttribute('data-rotate');
    const period = this.getAttribute('data-period');

    if (toRotate) {
      this.toRotate = JSON.parse(toRotate);
    }
    if (period) {
      this.period = parseInt(period, 10) || 2000;
    }

    this.tick();
  }

  tick() {
    const i = this.loopNum % this.toRotate.length;
    const fullTxt = this.toRotate[i];

    if (this.isDeleting) {
      this.txt = fullTxt.substring(0, this.txt.length - 1);
    } else {
      this.txt = fullTxt.substring(0, this.txt.length + 1);
    }

    this.innerHTML = '<span class="h-auto inline-block">' + this.txt + '</span>';

    let delta = 200 - Math.random() * 100;

    if (this.isDeleting) {
      delta /= 2;
    }

    if (!this.isDeleting && this.txt === fullTxt) {
      delta = this.period;
      this.isDeleting = true;
    } else if (this.isDeleting && this.txt === "") {
      this.isDeleting = false;
      this.loopNum++;
      delta = 500;
    }

    setTimeout(() => this.tick(), delta);
  }
}

customElements.define('type-writer', TypewriterComponent);
</script>

<script>
  // Character movement
  function initCharacterMovement() {
    const character = document.getElementById("character");
    const grid = document.querySelector(".pixel-grid") as HTMLElement;

    if (!character || !grid) return;

    let isMoving = false;

    grid.addEventListener("mousemove", (e) => {
      if (!isMoving) {
        isMoving = true;
        requestAnimationFrame(() => {
          const rect = grid.getBoundingClientRect();
          const x = e.clientX - rect.left - 24; // Center the character (48/2)
          const y = e.clientY - rect.top - 24;

          // Update CSS variables for position
          character.style.setProperty("--x", `${x}px`);
          character.style.setProperty("--y", `${y}px`);
          character.style.transform = `translate(${x}px, ${y}px)`;

          isMoving = false;
        });
      }
    });
  }

  document.addEventListener("astro:page-load", () => {
    initCharacterMovement();
  });
</script>
